name: PROD API CI && CD

on:
  push:
    branches:
      - 'production'

permissions:
  id-token: write
  contents: read

jobs:

  db-api-migration:
    runs-on: ubuntu-latest
    name: API Database migration
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup .NET SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x' # Change this to your desired .NET version

      - name: Install EF Core tools
        run: dotnet tool install --global dotnet-ef --version 8.0.0

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore Backend/WebAPI/WebAPI.csproj

      # Run EF Core migrations
      - name: Run migrations
        run: dotnet ef database update -c ApiDbContext -p Backend/DatabaseContext -s Backend/WebAPI
        env:
          DatabaseConnection: ${{ secrets.PRODUCTION_API_DB_CONNECTION }} # Store your connection string as a secret in your repository settings

  # define the job to build and publish the docker image
  build-push-docker-image:
    needs: [db-api-migration]
    name: Build Docker image and push to repositories
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest

    # steps to perform in the job
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: xnotes/web
          tags: type=raw,value={{branch}}-{{sha}}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./pipeline-files/api/api.prod.dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # define the job to build and publish the docker image
  deploy-to-aca:
    needs: [build-push-docker-image]
    name: Deploy API to Azure container apps
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest

    # steps to perform in the job
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: xnotes/web
          tags: type=raw,value={{branch}}-{{sha}}

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.DEV_WEB_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.DEV_WEB_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.DEV_WEB_AZURE_SUBSCRIPTION_ID }}
            
      - name: Deploy to containerapp
        uses: azure/CLI@v1
        env:
          CONTAINER_APP_CONTAINER_NAME: web
          CONTAINER_APP_NAME: web
          CONTAINER_APP_RESOURCE_GROUP_NAME: XNotesProd
        with:
          inlineScript: >
            az config set extension.use_dynamic_install=yes_without_prompt

            az containerapp update --name ${{ env.CONTAINER_APP_NAME }} --container-name ${{ env.CONTAINER_APP_CONTAINER_NAME }} --resource-group ${{ env.CONTAINER_APP_RESOURCE_GROUP_NAME }} --image ${{ steps.meta.outputs.tags }} --cpu 0.25 --memory 0.5Gi --scale-rule-name custom-memory-rule --scale-rule-type memory --scale-rule-metadata type=utilization value=70 --min-replicas 1 --max-replicas 10 --set-env-vars GoogleAuth__Audience=613032211191-fk4mhbtouf1s8a9cj8g6r5usj825v84q.apps.googleusercontent.com DatabaseConnection=secretref:database-connection Controllers__FakeData=false Redis__ChannelPrefix=ProdXNotes- Redis__Active=true Redis__Connection=secretref:redis-connection Redis__Password=secretref:redis-password JwtConfig__secret=secretref:jwt-secret JwtConfig__issuer=secretref:jwt-issuer JwtConfig__audience=secretref:jwt-audience JwtConfig__accessTokenExpiration=secretref:jwt-access-token-expiration JwtConfig__refreshTokenExpiration=secretref:jwt-refresh-token-expiration JwtConfig__https=true Azure__Storages__0__Name=Prod Azure__Storages__0__Id=9020 Azure__Storages__0__Connection=secretref:storage-connection Azure__Storages__0__Url=secretref:storage-url GoogleClient__Id=613032211191-fk4mhbtouf1s8a9cj8g6r5usj825v84q.apps.googleusercontent.com AuthRequest__Url=api/Auth/google/login AuthRequest__RedirectUrl=/ Seq__ServerUrl=secretref:seq-server-url Seq__ApiKey=secretref:seq-api-key  Seq__ApplicationName=secretref:seq-application-name

            az containerapp ingress update -n ${{ env.CONTAINER_APP_CONTAINER_NAME }} -g ${{ env.CONTAINER_APP_RESOURCE_GROUP_NAME }} --target-port 5000 --type external
                
            az containerapp ingress sticky-sessions set -n ${{ env.CONTAINER_APP_CONTAINER_NAME }} -g ${{ env.CONTAINER_APP_RESOURCE_GROUP_NAME }} --affinity sticky
            
            az containerapp dapr enable -n ${{ env.CONTAINER_APP_CONTAINER_NAME }} --resource-group ${{ env.CONTAINER_APP_RESOURCE_GROUP_NAME }} --dapr-app-port 5000 --dapr-app-protocol http --dapr-app-id web
      
      - name: logout
        run: >
          az logout
