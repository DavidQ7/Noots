// <auto-generated />
using System;
using DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseContext.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20231225215104_AddValidationConstraints")]
    partial class AddValidationConstraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.DatabaseModels.Models.Files.AppFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LostCheckedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetaData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PathFileId")
                        .HasColumnType("text");

                    b.Property<string>("PathPrefix")
                        .HasColumnType("text");

                    b.Property<string>("PathSuffixes")
                        .HasColumnType("jsonb");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("StorageId");

                    b.HasIndex("UserId");

                    b.ToTable("AppFile", "file");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Files.AppFileUploadInfo", b =>
                {
                    b.Property<Guid>("AppFileId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("LinkedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UnLinkedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppFileId");

                    b.ToTable("AppFileUploadInfo", "file");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Files.FileType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FileType", "file");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Audio"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Photo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Video"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Document"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Files.Storage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Storage", "file");

                    b.HasData(
                        new
                        {
                            Id = 9000,
                            Name = "DEV"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Folders.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FolderTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("RefTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("FolderTypeId");

                    b.HasIndex("RefTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Folder", "folder");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Folders.FolderType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FolderType", "folder");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Private"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shared"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Archived"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Folders.FoldersNotes", b =>
                {
                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("NoteId", "FolderId");

                    b.HasIndex("FolderId");

                    b.ToTable("FoldersNotes", "folder");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Folders.UsersOnPrivateFolders", b =>
                {
                    b.Property<Guid>("FolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessTypeId")
                        .HasColumnType("integer");

                    b.HasKey("FolderId", "UserId");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersOnPrivateFolders", "folder");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.History.CacheNoteHistory", b =>
                {
                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsersThatEditIds")
                        .HasColumnType("jsonb");

                    b.HasKey("NoteId");

                    b.ToTable("CacheNoteHistory", "note_history");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.History.NoteSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Contents")
                        .HasColumnType("jsonb");

                    b.Property<string>("Labels")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<int>("NoteTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RefTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SnapshotTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("NoteTypeId");

                    b.HasIndex("RefTypeId");

                    b.ToTable("NoteSnapshot", "note_history");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.History.SnapshotFileContent", b =>
                {
                    b.Property<Guid>("NoteSnapshotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppFileId")
                        .HasColumnType("uuid");

                    b.HasKey("NoteSnapshotId", "AppFileId");

                    b.HasIndex("AppFileId");

                    b.ToTable("SnapshotFileContent", "note_history");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.History.UserNoteSnapshotManyToMany", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NoteSnapshotId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "NoteSnapshotId");

                    b.HasIndex("NoteSnapshotId");

                    b.ToTable("UserNoteSnapshotManyToMany", "note_history");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Labels.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Label", "label");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Labels.LabelsNotes", b =>
                {
                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NoteId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("LabelsNotes", "label");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.NoteContent.BaseNoteContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Contents")
                        .HasMaxLength(12000)
                        .HasColumnType("jsonb");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("jsonb");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("PlainContent")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("NoteId");

                    b.ToTable("BaseNoteContent", "note_content");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.NoteContent.ContentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContentType", "note_content");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Text"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Collection"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.NoteContent.FileContent.CollectionNoteAppFile", b =>
                {
                    b.Property<Guid>("BaseNoteContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppFileId")
                        .HasColumnType("uuid");

                    b.HasKey("BaseNoteContentId", "AppFileId");

                    b.HasIndex("AppFileId");

                    b.ToTable("CollectionNoteAppFile", "note_content");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.NoteContent.TextContent.TextNoteIndex", b =>
                {
                    b.Property<Guid>("BaseNoteContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("BaseNoteContentId");

                    b.HasIndex("NoteId");

                    b.ToTable("TextNoteIndex", "note_content");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NoteTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("RefTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("NoteTypeId");

                    b.HasIndex("RefTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Note", "note");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.NoteType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NoteType", "note");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Private"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shared"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Archived"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.RelatedNoteToInnerNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("RelatedNoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("RelatedNoteId");

                    b.ToTable("RelatedNoteToInnerNote", "note");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.RelatedNoteUserState", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RelatedNoteInnerNoteId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "RelatedNoteInnerNoteId");

                    b.HasIndex("RelatedNoteInnerNoteId");

                    b.ToTable("RelatedNoteUserState", "note");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.UserOnPrivateNotes", b =>
                {
                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessTypeId")
                        .HasColumnType("integer");

                    b.HasKey("NoteId", "UserId");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOnPrivateNotes", "note");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Plan.BillingPlan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("MaxBackgrounds")
                        .HasColumnType("integer");

                    b.Property<int>("MaxFolders")
                        .HasColumnType("integer");

                    b.Property<int>("MaxLabels")
                        .HasColumnType("integer");

                    b.Property<int>("MaxNotes")
                        .HasColumnType("integer");

                    b.Property<int>("MaxRelatedNotes")
                        .HasColumnType("integer");

                    b.Property<long>("MaxSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("BillingPlan", "user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxBackgrounds = 10,
                            MaxFolders = 40,
                            MaxLabels = 100,
                            MaxNotes = 160,
                            MaxRelatedNotes = 5,
                            MaxSize = 104857600L,
                            Name = "Standart",
                            Price = 0.0
                        },
                        new
                        {
                            Id = 2,
                            MaxBackgrounds = 20,
                            MaxFolders = 10000,
                            MaxLabels = 10000,
                            MaxNotes = 10000,
                            MaxRelatedNotes = 30,
                            MaxSize = 5242880000L,
                            Name = "Premium",
                            Price = 1.5
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Security.RefreshToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("TokenString")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsProcessing")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "TokenString");

                    b.ToTable("RefreshToken", "sec");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Systems.FontSize", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FontSize", "systems");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Big"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Systems.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Language", "systems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = 5,
                            Name = "French"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 7,
                            Name = "German"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Swedish"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Polish"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Japan"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Systems.RefType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefType", "systems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Viewer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Systems.Theme", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Theme", "systems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dark"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Light"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.Background", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Background", "user");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalMessage")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemMessage")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<int>("NotificationMessagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(4);

                    b.Property<Guid?>("UserFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserToId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationMessagesId");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("Notification", "user");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.Notifications.NotificationMessages", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("MessageKey")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationMessages", "user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MessageKey = "notification.changeUserPermissionFolder"
                        },
                        new
                        {
                            Id = 2,
                            MessageKey = "notification.changeUserPermissionNote"
                        },
                        new
                        {
                            Id = 3,
                            MessageKey = "notification.sentInvitesToFolder"
                        },
                        new
                        {
                            Id = 4,
                            MessageKey = "notification.sentInvitesToNote"
                        },
                        new
                        {
                            Id = 5,
                            MessageKey = "notification.removeUserFromFolder"
                        },
                        new
                        {
                            Id = 6,
                            MessageKey = "notification.removeUserFromNote"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.PersonalizationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContentInNoteCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsViewAudioOnNote")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViewDocumentOnNote")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViewPhotosOnNote")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViewTextOnNote")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViewVideoOnNote")
                        .HasColumnType("boolean");

                    b.Property<int>("NotesInFolderCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<int>("SortedFolderByTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SortedNoteByTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SortedFolderByTypeId");

                    b.HasIndex("SortedNoteByTypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PersonalizationSetting", "user");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.SortedByType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SortedByType", "user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AscDate"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DescDate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CustomOrder"
                        });
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BillingPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("CurrentBackgroundId")
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultPhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FontSizeId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StorageId")
                        .HasColumnType("integer");

                    b.Property<int>("ThemeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BillingPlanId");

                    b.HasIndex("CurrentBackgroundId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FontSizeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StorageId");

                    b.HasIndex("ThemeId");

                    b.ToTable("User", "user");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.UserProfilePhoto", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppFileId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("AppFileId")
                        .IsUnique();

                    b.ToTable("UserProfilePhoto", "user");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.WS.FolderConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdentifierConnectionIdId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserIdentifierConnectionIdId");

                    b.ToTable("FolderConnection", "ws");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.WS.NoteConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdentifierConnectionIdId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("UserIdentifierConnectionIdId");

                    b.ToTable("NoteConnection", "ws");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.WS.UserIdentifierConnectionId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ConnectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserIdentifierConnectionId", "ws");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Files.AppFile", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Files.FileType", "FileType")
                        .WithMany("AppFiles")
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Files.Storage", "Storage")
                        .WithMany("AppFiles")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("Storage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Files.AppFileUploadInfo", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Files.AppFile", "AppFile")
                        .WithOne("AppFileUploadInfo")
                        .HasForeignKey("Common.DatabaseModels.Models.Files.AppFileUploadInfo", "AppFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppFile");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Folders.Folder", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Folders.FolderType", "FolderType")
                        .WithMany("Folders")
                        .HasForeignKey("FolderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Systems.RefType", "RefType")
                        .WithMany("Folders")
                        .HasForeignKey("RefTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("Folders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FolderType");

                    b.Navigation("RefType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Folders.FoldersNotes", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Folders.Folder", "Folder")
                        .WithMany("FoldersNotes")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "Note")
                        .WithMany("FoldersNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Folders.UsersOnPrivateFolders", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Systems.RefType", "AccessType")
                        .WithMany("UsersOnPrivateFolders")
                        .HasForeignKey("AccessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Folders.Folder", "Folder")
                        .WithMany("UsersOnPrivateFolders")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("UsersOnPrivateFolders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessType");

                    b.Navigation("Folder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.History.CacheNoteHistory", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "Note")
                        .WithOne("CacheNoteHistory")
                        .HasForeignKey("Common.DatabaseModels.Models.History.CacheNoteHistory", "NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.History.NoteSnapshot", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "Note")
                        .WithMany("History")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Notes.NoteType", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Systems.RefType", "RefType")
                        .WithMany()
                        .HasForeignKey("RefTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("NoteType");

                    b.Navigation("RefType");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.History.SnapshotFileContent", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Files.AppFile", "AppFile")
                        .WithMany("SnapshotFileContents")
                        .HasForeignKey("AppFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.History.NoteSnapshot", "NoteSnapshot")
                        .WithMany("SnapshotFileContents")
                        .HasForeignKey("NoteSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppFile");

                    b.Navigation("NoteSnapshot");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.History.UserNoteSnapshotManyToMany", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.History.NoteSnapshot", "NoteSnapshot")
                        .WithMany("UserHistories")
                        .HasForeignKey("NoteSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NoteSnapshot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Labels.Label", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("Labels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Labels.LabelsNotes", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Labels.Label", "Label")
                        .WithMany("LabelsNotes")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "Note")
                        .WithMany("LabelsNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.NoteContent.BaseNoteContent", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.NoteContent.ContentType", "ContentType")
                        .WithMany("BaseNoteContents")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "Note")
                        .WithMany("Contents")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.NoteContent.FileContent.CollectionNoteAppFile", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Files.AppFile", "AppFile")
                        .WithMany("CollectionNoteAppFiles")
                        .HasForeignKey("AppFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.NoteContent.BaseNoteContent", "BaseNoteContent")
                        .WithMany("CollectionNoteAppFiles")
                        .HasForeignKey("BaseNoteContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppFile");

                    b.Navigation("BaseNoteContent");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.NoteContent.TextContent.TextNoteIndex", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.NoteContent.BaseNoteContent", "BaseNoteContent")
                        .WithOne("TextNoteIndex")
                        .HasForeignKey("Common.DatabaseModels.Models.NoteContent.TextContent.TextNoteIndex", "BaseNoteContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "Note")
                        .WithMany("TextNoteIndexes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseNoteContent");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.Note", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Notes.NoteType", "NoteType")
                        .WithMany("Notes")
                        .HasForeignKey("NoteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Systems.RefType", "RefType")
                        .WithMany("Notes")
                        .HasForeignKey("RefTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NoteType");

                    b.Navigation("RefType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.RelatedNoteToInnerNote", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "Note")
                        .WithMany("ReletatedNoteToInnerNotesFrom")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "RelatedNote")
                        .WithMany("ReletatedNoteToInnerNotesTo")
                        .HasForeignKey("RelatedNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("RelatedNote");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.RelatedNoteUserState", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Notes.RelatedNoteToInnerNote", "RelatedNoteInnerNote")
                        .WithMany("RelatedNoteUserStates")
                        .HasForeignKey("RelatedNoteInnerNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("RelatedNoteUserStates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedNoteInnerNote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.UserOnPrivateNotes", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Systems.RefType", "AccessType")
                        .WithMany("UserOnPrivateNotes")
                        .HasForeignKey("AccessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "Note")
                        .WithMany("UsersOnPrivateNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("UserOnPrivateNotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessType");

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Security.RefreshToken", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.Background", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Files.AppFile", "File")
                        .WithOne("Background")
                        .HasForeignKey("Common.DatabaseModels.Models.Users.Background", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("Backgrounds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.Notifications.Notification", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Users.Notifications.NotificationMessages", "NotificationMessages")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "UserFrom")
                        .WithMany("NotificationsFrom")
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "UserTo")
                        .WithMany("NotificationsTo")
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationMessages");

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.PersonalizationSetting", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Users.SortedByType", "SortedFolderByType")
                        .WithMany("PersonalizationSettingsFolders")
                        .HasForeignKey("SortedFolderByTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.SortedByType", "SortedNoteByType")
                        .WithMany("PersonalizationSettingsNotes")
                        .HasForeignKey("SortedNoteByTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithOne("PersonalizationSetting")
                        .HasForeignKey("Common.DatabaseModels.Models.Users.PersonalizationSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SortedFolderByType");

                    b.Navigation("SortedNoteByType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.User", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Plan.BillingPlan", "BillingPlan")
                        .WithMany("Users")
                        .HasForeignKey("BillingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.Background", "CurrentBackground")
                        .WithOne("CurrentUserBackground")
                        .HasForeignKey("Common.DatabaseModels.Models.Users.User", "CurrentBackgroundId");

                    b.HasOne("Common.DatabaseModels.Models.Systems.FontSize", "FontSize")
                        .WithMany("Users")
                        .HasForeignKey("FontSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Systems.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Files.Storage", "Storage")
                        .WithMany("Users")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Systems.Theme", "Theme")
                        .WithMany("Users")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingPlan");

                    b.Navigation("CurrentBackground");

                    b.Navigation("FontSize");

                    b.Navigation("Language");

                    b.Navigation("Storage");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.UserProfilePhoto", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Files.AppFile", "AppFile")
                        .WithOne("UserProfilePhoto")
                        .HasForeignKey("Common.DatabaseModels.Models.Users.UserProfilePhoto", "AppFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithOne("UserProfilePhoto")
                        .HasForeignKey("Common.DatabaseModels.Models.Users.UserProfilePhoto", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.WS.FolderConnection", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Folders.Folder", "Folder")
                        .WithMany("FolderConnections")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.WS.UserIdentifierConnectionId", "UserIdentifierConnectionId")
                        .WithMany("FolderConnections")
                        .HasForeignKey("UserIdentifierConnectionIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("UserIdentifierConnectionId");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.WS.NoteConnection", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Notes.Note", "Note")
                        .WithMany("NoteConnections")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DatabaseModels.Models.WS.UserIdentifierConnectionId", "UserIdentifierConnectionId")
                        .WithMany("NoteConnections")
                        .HasForeignKey("UserIdentifierConnectionIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("UserIdentifierConnectionId");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.WS.UserIdentifierConnectionId", b =>
                {
                    b.HasOne("Common.DatabaseModels.Models.Users.User", "User")
                        .WithMany("UserIdentifierConnectionIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Files.AppFile", b =>
                {
                    b.Navigation("AppFileUploadInfo");

                    b.Navigation("Background");

                    b.Navigation("CollectionNoteAppFiles");

                    b.Navigation("SnapshotFileContents");

                    b.Navigation("UserProfilePhoto");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Files.FileType", b =>
                {
                    b.Navigation("AppFiles");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Files.Storage", b =>
                {
                    b.Navigation("AppFiles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Folders.Folder", b =>
                {
                    b.Navigation("FolderConnections");

                    b.Navigation("FoldersNotes");

                    b.Navigation("UsersOnPrivateFolders");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Folders.FolderType", b =>
                {
                    b.Navigation("Folders");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.History.NoteSnapshot", b =>
                {
                    b.Navigation("SnapshotFileContents");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Labels.Label", b =>
                {
                    b.Navigation("LabelsNotes");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.NoteContent.BaseNoteContent", b =>
                {
                    b.Navigation("CollectionNoteAppFiles");

                    b.Navigation("TextNoteIndex");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.NoteContent.ContentType", b =>
                {
                    b.Navigation("BaseNoteContents");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.Note", b =>
                {
                    b.Navigation("CacheNoteHistory");

                    b.Navigation("Contents");

                    b.Navigation("FoldersNotes");

                    b.Navigation("History");

                    b.Navigation("LabelsNotes");

                    b.Navigation("NoteConnections");

                    b.Navigation("ReletatedNoteToInnerNotesFrom");

                    b.Navigation("ReletatedNoteToInnerNotesTo");

                    b.Navigation("TextNoteIndexes");

                    b.Navigation("UsersOnPrivateNotes");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.NoteType", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Notes.RelatedNoteToInnerNote", b =>
                {
                    b.Navigation("RelatedNoteUserStates");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Plan.BillingPlan", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Systems.FontSize", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Systems.Language", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Systems.RefType", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Notes");

                    b.Navigation("UserOnPrivateNotes");

                    b.Navigation("UsersOnPrivateFolders");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Systems.Theme", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.Background", b =>
                {
                    b.Navigation("CurrentUserBackground");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.Notifications.NotificationMessages", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.SortedByType", b =>
                {
                    b.Navigation("PersonalizationSettingsFolders");

                    b.Navigation("PersonalizationSettingsNotes");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.Users.User", b =>
                {
                    b.Navigation("Backgrounds");

                    b.Navigation("Files");

                    b.Navigation("Folders");

                    b.Navigation("Labels");

                    b.Navigation("Notes");

                    b.Navigation("NotificationsFrom");

                    b.Navigation("NotificationsTo");

                    b.Navigation("PersonalizationSetting");

                    b.Navigation("RelatedNoteUserStates");

                    b.Navigation("Tokens");

                    b.Navigation("UserHistories");

                    b.Navigation("UserIdentifierConnectionIds");

                    b.Navigation("UserOnPrivateNotes");

                    b.Navigation("UserProfilePhoto");

                    b.Navigation("UsersOnPrivateFolders");
                });

            modelBuilder.Entity("Common.DatabaseModels.Models.WS.UserIdentifierConnectionId", b =>
                {
                    b.Navigation("FolderConnections");

                    b.Navigation("NoteConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
